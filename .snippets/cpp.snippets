global !p
import os
import sys
from pathlib import Path
import importlib
sys.path.append(os.environ['GH_DIR'] + '/.snippets')
import snippet_helpers as h
importlib.reload(h)
endglobal

snippet ifndef "flexflow ifndef" bA
#ifndef `!p snip.rv = h.gen_ifndef_uid(path)`
#define `!p snip.rv = h.gen_ifndef_uid(path)`
endsnippet

snippet hdr "flexflow header gen" bA
#ifndef `!p snip.rv = h.gen_ifndef_uid(path)`
#define `!p snip.rv = h.gen_ifndef_uid(path)`

namespace FlexFlow {

$0

} // namespace FlexFlow

#endif
endsnippet

snippet src "flexflow src gen" bA
#include "`!p snip.rv = h.get_include_path(path)`"
endsnippet

snippet test "flexflow test gen" bA
#include "utils/testing.h"
#include "`!p snip.rv = h.get_include_path(path)`"

TEST_SUITE(FF_TEST_SUITE) {
	TEST_CASE("${1}") {
    CHECK_MESSAGE(false, "TODO: $1");
	}
}
endsnippet

snippet gen_v "generate _v" bA
template <typename T>
inline constexpr bool ${1}_v = $1<T>::value;
endsnippet

snippet gen_t "generate _v" bA
template <typename T>
using ${1}_t = typename $1<T>::type;
endsnippet

snippet tn "typename" wA
typename 
endsnippet

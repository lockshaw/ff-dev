#! /usr/bin/env python3

import json
from pathlib import Path
import subprocess
import string

top_level = Path(subprocess.check_output(["git", "rev-parse", "--show-toplevel"]).decode().strip())

def is_library(base_path: Path):
    if base_path.is_dir():
        all_files = set(base_path.iterdir())
        if all_files == {(base_path / 'include'), (base_path / 'src'), (base_path / 'CMakeLists.txt')}:
            return True
    return False

def find_libraries(base_dir: Path):
    if not base_dir.is_dir():
        return 

    for child in base_dir.iterdir():
        if is_library(child):
            yield (base_dir / child)
        else:
            yield from find_libraries(base_dir / child)

libraries = list(find_libraries(top_level / 'lib'))
print('Found the following libraries:')
print('\n'.join(map(str, libraries)))

def match_except(to_exclude):
    allowed = set(string.ascii_letters)
    return '[' + ''.join(sorted(allowed - set(to_exclude))) + ']'

def config_for_library(base_path: Path):
    base_path = base_path.relative_to(top_level)
    return {
        f'{base_path}/src/*.cc' : {
            'alternate': [f'{base_path}/src/{{}}.test.cc', f'{base_path}/include/{{}}.h', f'{base_path}/src/{{}}.h'],
            'type': 's',
        },
        f'{base_path}/src/*.test.cc' : {
            'alternate': [f'{base_path}/src/{{}}.h', f'{base_path}/include/{{}}.h', f'{base_path}/src/{{}}.cc'],
            'type': 't',
        },
        f'{base_path}/include/*.h': {
            'alternate': [f'{base_path}/src/{{}}.cc', f'{base_path}/src/{{}}.test.cc'],
            'type': 'h',
        },
        f'{base_path}/src/*.h': {
            'alternate': [f'{base_path}/src/{{}}.cc', f'{base_path}/src/{{}}.test.cc'],
            'type': 'h',
        }
    }

projection_config = {}
for library in libraries:
    projection_config = { **projection_config, **config_for_library(library) }

config_path = top_level / '.projections.json'
print()
print(f'Writing projection configuration to {config_path}')
with config_path.open('w') as f:
    json.dump(projection_config, fp=f, indent=2)
